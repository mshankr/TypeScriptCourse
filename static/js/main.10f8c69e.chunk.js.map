{"version":3,"sources":["actions/types.ts","actions/todos.ts","components/App.tsx","reducers/index.ts","reducers/todos.ts","index.tsx"],"names":["ActionTypes","_App","props","onCreateClick","state","newTodo","createTodo","clearInput","onKbCreateClick","event","key","addButton","icon","IconNames","KEY_ENTER","intent","Intent","PRIMARY","minimal","onClick","onFetchClick","fetchTodos","setState","fetching","fetched","onTodoClick","id","deleteTodo","handleTextChange","target","value","handleFocus","select","prevProps","todos","length","this","map","todo","className","completed","title","INBOX","style","marginTop","src","process","type","placeholder","onChange","onKeyDown","onFocus","SEND_MESSAGE","NONE","renderList","React","Component","App","connect","dispatch","a","axios","get","response","payload","data","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.10f8c69e.chunk.js","sourcesContent":["import { FetchTodosAction, DeleteTodoAction, CreateTodoAction } from \"./todos\";\r\n\r\nexport enum ActionTypes {\r\n  fetchTodos, // : 0\r\n  deleteTodo, // : 1\r\n  createTodo, // : 2\r\n}\r\n\r\nexport type Action = FetchTodosAction | DeleteTodoAction | CreateTodoAction;\r\n","import axios from \"axios\";\r\nimport { Action, Dispatch } from \"redux\";\r\nimport { ActionTypes } from \"./types\";\r\n\r\nexport interface Todo {\r\n  id: number;\r\n  title: string;\r\n  completed: boolean;\r\n}\r\n\r\nexport interface FetchTodosAction {\r\n  type: ActionTypes.fetchTodos;\r\n  payload: Todo[];\r\n}\r\n\r\nexport interface DeleteTodoAction {\r\n  type: ActionTypes.deleteTodo;\r\n  payload: number; // id of Todo to delete\r\n}\r\n\r\nexport interface CreateTodoAction {\r\n  type: ActionTypes.createTodo;\r\n  payload: string; // Todo string\r\n}\r\n\r\nconst url = \"https://jsonplaceholder.typicode.com/todos\";\r\n\r\nexport const fetchTodos = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    const response = await axios.get<Todo[]>(url);\r\n\r\n    // Redux Thunk allows action to be dispatched after some logic,\r\n    // Instead of must directly return the action\r\n    dispatch<FetchTodosAction>({\r\n      type: ActionTypes.fetchTodos,\r\n      payload: response.data,\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteTodo = (id: number): DeleteTodoAction => {\r\n  return {\r\n    type: ActionTypes.deleteTodo,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const createTodo = (title: string): CreateTodoAction => {\r\n  return {\r\n    type: ActionTypes.createTodo,\r\n    payload: title,\r\n  };\r\n};\r\n","import {\r\n  Button,\r\n  Icon,\r\n  InputGroup,\r\n  Intent,\r\n  NonIdealState,\r\n  ProgressBar,\r\n} from \"@blueprintjs/core\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createTodo, deleteTodo, fetchTodos, Todo } from \"../actions\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\n\r\ninterface AppProps {\r\n  todos: Todo[];\r\n  fetchTodos(): any;\r\n  deleteTodo(id: number): any;\r\n  createTodo(title: string): any;\r\n}\r\n\r\ninterface AppState {\r\n  fetching: boolean;\r\n  newTodo: string;\r\n  fetched: boolean;\r\n}\r\n\r\nclass _App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n    this.state = {\r\n      fetching: false,\r\n      newTodo: \"\",\r\n      fetched: false,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: AppProps): void {\r\n    if (prevProps.todos.length !== this.props.todos.length) {\r\n      this.setState({\r\n        fetching: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  onCreateClick = (): void => {\r\n    if (this.state.newTodo) {\r\n      this.props.createTodo(this.state.newTodo);\r\n      this.clearInput();\r\n    }\r\n  };\r\n\r\n  onKbCreateClick = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    // event.preventDefault();\r\n\r\n    if (event.key === \"Enter\") {\r\n      this.onCreateClick();\r\n    }\r\n  };\r\n\r\n  addButton = (\r\n    <Button\r\n      icon={IconNames.KEY_ENTER}\r\n      intent={Intent.PRIMARY}\r\n      minimal={true}\r\n      onClick={this.onCreateClick}\r\n    />\r\n  );\r\n\r\n  onFetchClick = (): void => {\r\n    this.props.fetchTodos();\r\n    this.setState({\r\n      fetching: true,\r\n      fetched: true,\r\n    });\r\n  };\r\n\r\n  onTodoClick = (id: number): void => {\r\n    this.props.deleteTodo(id);\r\n  };\r\n\r\n  handleTextChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    // event.preventDefault();\r\n    if (event.target) {\r\n      this.setState({\r\n        newTodo: event.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  clearInput = (): void => {\r\n    this.setState({\r\n      newTodo: \"\",\r\n    });\r\n  };\r\n\r\n  handleFocus = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    event.target.select();\r\n  };\r\n\r\n  renderList(): JSX.Element[] {\r\n    if (!this.props.todos.length) {\r\n      return [<NonIdealState icon={IconNames.INBOX} title=\"No todos\" />];\r\n    }\r\n    return this.props.todos.map((todo: Todo) => (\r\n      <div key={todo.id} className=\"pointer\">\r\n        <div onClick={() => this.onTodoClick(todo.id)}>\r\n          {todo.completed ? (\r\n            <i className=\"check square outline icon\"></i>\r\n          ) : (\r\n            <i className=\"square outline icon\"></i>\r\n          )}\r\n          &nbsp;\r\n          {todo.title}\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui container\" style={{ marginTop: \"20px\" }}>\r\n        <h2 className=\"ui header\">\r\n          <img\r\n            src={process.env.PUBLIC_URL + \"/molly.png\"}\r\n            className=\"ui circular image\"\r\n          />\r\n          Molly's To-do List\r\n        </h2>\r\n        <button\r\n          className={\"ui button \" + (this.state.fetched && \"disabled\")}\r\n          onClick={this.onFetchClick}\r\n        >\r\n          Fetch\r\n        </button>\r\n        <br />\r\n        <br />\r\n\r\n        {/*\r\n        <InputGroup\r\n          placeholder=\"What to do next?\"\r\n          rightElement={this.addButton}\r\n          type=\"text\"\r\n          onKeyDown={this.onKbCreateClick}\r\n          onChange={this.handleTextChange}\r\n        />\r\n        */}\r\n        {/* HTML elements are affected by Materialize CSS*/}\r\n        <div className=\"ui action input\" id=\"text-input\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add new to-do...\"\r\n            value={this.state.newTodo}\r\n            onChange={this.handleTextChange}\r\n            onKeyDown={this.onKbCreateClick}\r\n            onFocus={this.handleFocus}\r\n          />\r\n          <button\r\n            className=\"ui icon positive button\"\r\n            onClick={this.onCreateClick}\r\n          >\r\n            <Icon icon={IconNames.SEND_MESSAGE} />\r\n          </button>\r\n        </div>\r\n        {this.state.fetching && <ProgressBar intent={Intent.NONE} />}\r\n        <br />\r\n        {this.renderList()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ todos }: StoreState): { todos: Todo[] } => {\r\n  return { todos };\r\n};\r\n\r\nexport const App = connect(mapStateToProps, {\r\n  fetchTodos,\r\n  deleteTodo,\r\n  createTodo,\r\n})(_App);\r\n","import { combineReducers } from \"redux\";\r\nimport { todosReducer } from \"./todos\";\r\nimport { Todo } from \"../actions\";\r\n\r\n// make sure that reducer is returning this type!!\r\nexport interface StoreState {\r\n  todos: Todo[];\r\n}\r\n\r\nexport const reducers = combineReducers<StoreState>({\r\n  todos: todosReducer,\r\n});\r\n","import { ActionTypes, Todo, Action } from \"../actions\";\r\n\r\nexport const todosReducer = (state: Todo[] = [], action: Action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.fetchTodos:\r\n      return action.payload;\r\n\r\n    case ActionTypes.deleteTodo:\r\n      return state.filter((todo: Todo) => todo.id !== action.payload);\r\n\r\n    case ActionTypes.createTodo:\r\n      return [\r\n        {\r\n          id: state.length + 1000,\r\n          title: action.payload,\r\n          completed: false,\r\n        },\r\n        ...state,\r\n      ];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { App } from \"./components/App\";\r\nimport { reducers } from \"./reducers\";\r\n// import \"materialize-css/dist/css/materialize.min.css\";\r\nimport \"normalize.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}